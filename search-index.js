var searchIndex = JSON.parse('{\
"libriakv":{"doc":"<code>riakv</code>","t":[6,6,13,13,4,13,3,13,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["ByteStr","ByteString","Delete","End","IndexOp","Insert","KeyValuePair","Nop","RiaKV","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","delete","deserialize","f","find","fmt","fmt","for_each_kv_entry_in_storage","from","from","from","get","get_at","index","insert","insert_but_ignore_index","into","into","into","key","load","load_index","open_from_file_at_path","open_from_in_memory_buffer","persist_index","process_record","seek_to_end","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","value"],"q":["libriakv","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Type to represent binary content internally","Type to represent binary content","","","Represent the kind of index operation to use for a given …","","Representation of a key value pair","","Generic representation of a key value store in <code>libriakv</code> …","","","","","","","Deletes the value for the given key by inserting a <em>…","","","Finds the first <code>KeyValueEntry{}</code> corresponding to the …","","","For each function for processing all <code>KeyValuePair{}</code> …","","","","Get the value for the given key.","Gets the <code>KeyValuePair{}</code> instance stored at the given …","","Inserts the given key value pair into the underlying …","Inserts the given key value pair into the underlying …","","","","","Loads all the key value entries from the underlying …","Loads the index from the given object implementing the …","Creates a new <code>RiaKV</code> instance from a file stored at the …","Creates a new <code>RiakV</code> instance from an in memory buffer […","Writes the index into the given object implementing the …","Processes a record from the current position in the …","Seeks to the end of the underlying storage file. Any …","","","","","","","","","","","Updates the value for the given key by inserting a …",""],"i":[0,0,1,1,0,1,0,1,0,1,2,3,1,2,3,3,2,3,3,2,3,3,1,2,3,3,3,3,3,3,1,2,3,2,3,3,3,3,3,3,3,2,1,2,3,1,2,3,1,2,3,3,2],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["bytestr",6]],["result",6]],[[],["result",4]],null,[[["bytestr",6]],[["result",6],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[["bytestr",6]],[["option",4],["result",6]]],[[["u64",15]],[["result",6],["keyvaluepair",3]]],null,[[["bytestr",6]],["result",6]],[[["bytestr",6]],[["result",6],["u64",15]]],[[]],[[]],[[]],null,[[],["result",6]],[[],[["error",6],["result",4]]],[[["path",3]],["result",6]],[[["usize",15]]],[[],[["error",6],["result",4]]],[[],[["result",6],["keyvaluepair",3]]],[[],[["result",6],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bytestr",6]],["result",6]],null],"p":[[4,"IndexOp"],[3,"KeyValuePair"],[3,"RiaKV"]]},\
"riakv_disk":{"doc":"","t":[17,5,5],"n":["USAGE","index_file_from_path","main"],"q":["riakv_disk","",""],"d":["","",""],"i":[0,0,0],"f":[null,[[["path",3]],[["file",3],["result",6]]],[[]]],"p":[]},\
"riakv_mem":{"doc":"","t":[17,5],"n":["USAGE","main"],"q":["riakv_mem",""],"d":["",""],"i":[0,0],"f":[null,[[]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};